package com.inthergroup.internship.models;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * An entity CareerLevels composed by two fields (id, name). The Entity
 * annotation indicates that this class is a JPA entity. The Table annotation
 * specifies the name for the table in the db.
 *
 * @author interns
 */
@Entity
@Table(name = "career_levels")
public class CareerLevel {

    // ------------------------
    // PRIVATE FIELDS
    // ------------------------

    // An autogenerated id
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(length = 20)
    private long id;
    
    @Column(nullable = false, unique = true)
    private String name;
    
    @OneToMany(mappedBy="careerLevel")
    private List<User> users;
    
    // TODO change to many-to-many with extra columns
    // The career level's benefits
    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinTable(
            name = "career_levels_benefits",
            joinColumns=@JoinColumn(name="career_level_id", referencedColumnName="id"),
            inverseJoinColumns=@JoinColumn(name="benefit_type_id", referencedColumnName="id"))
    private List<BenefitType> benefits;
    
    // TODO change to many-to-many with extra columns
    // The career level's todos (common for all users)
    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinTable(
            name = "career_levels_todos",
            joinColumns=@JoinColumn(name="career_level_id", referencedColumnName="id"),
            inverseJoinColumns=@JoinColumn(name="todo_type_id", referencedColumnName="id"))
    private List<TodoType> todos;
    
    // The career level's user todos (specific for each user)
    @OneToMany(mappedBy = "primaryKey.careerLevel", orphanRemoval=true,
            cascade = CascadeType.ALL)
    private Set<Todo> userTodos = new HashSet<Todo>();
    
    // ------------------------
    // PUBLIC METHODS
    // ------------------------

    public CareerLevel() {
    }

    public CareerLevel(long id) {
        this.id = id;
    }
    
    public CareerLevel(String name) {
        this.name = name;
    }

    public CareerLevel(long id, String name) {
        this.id = id;
        this.name = name;
    }
    
    // Getter and setter methods

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<User> getUsers() {
        return users;
    }

    public void setUsers(List<User> users) {
        this.users = users;
    }
    
    public void addUser(User user) {
        this.users.add(user);
        if (user.getCareerLevel() != this) {
            user.setCareerLevel(this);
        }
    }
    
    public List<BenefitType> getBenefits() {
        return benefits;
    }

    public void setBenefits(List<BenefitType> benefits) {
        this.benefits = benefits;
    }
    
    public void addBenefit(BenefitType benefit) {        
        benefits.add(benefit);
        
        if (!benefit.getCareerLevels().contains(this)) { // warning this may cause performance issues if you have a large data set since this operation is O(n)
            benefit.getCareerLevels().add(this);
        }
    }
    
    public void removeBenefit(BenefitType benefit) {        
        benefits.remove(benefit);
        
        if (benefit.getCareerLevels().contains(this)) { // warning this may cause performance issues if you have a large data set since this operation is O(n)
            benefit.getCareerLevels().remove(this);
        }
    }

    public List<TodoType> getTodos() {
        return todos;
    }

    public void setTodos(List<TodoType> todos) {
        this.todos = todos;
    }
    
    public void addTodo(TodoType todo) {        
        todos.add(todo);
        
        if (!todo.getCareerLevels().contains(this)) { // warning this may cause performance issues if you have a large data set since this operation is O(n)
            todo.getCareerLevels().add(this);
        }
    }
    
    public void removeTodo(TodoType todo) {
        todos.remove(todo);
        
        if (todo.getCareerLevels().contains(this)) { // warning this may cause performance issues if you have a large data set since this operation is O(n)
            todo.getCareerLevels().remove(this);
        }
    }

    public Set<Todo> getUserTodos() {
        return userTodos;
    }

    public void setUserTodos(Set<Todo> userTodos) {
        this.userTodos = userTodos;
    }

    @Override
    public String toString() {
        return this.name;
    }
}
